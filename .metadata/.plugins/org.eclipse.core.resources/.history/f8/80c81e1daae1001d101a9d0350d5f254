package comos.conectorEmprestimoLimite;

import java.util.ArrayList;
import java.util.List;

import br.ufal.aracomp.cosmos.emprestimo.spec.dt.UsuarioDT;
import br.ufal.aracomp.cosmos.emprestimo.spec.req.ILimiteReq;
import br.ufal.aracomp.cosmos.limite.spec.dt.ClienteDT;
import br.ufal.aracomp.cosmos.limite.spec.prov.ILimiteOps;
import br.ufal.aracomp.cosmos.limite2.spec.dt.ClienteDT2;
import br.ufal.aracomp.cosmos.limite2.spec.prov.ILimiteOps2;
import br.ufal.aracomp.cosmos.limite3.spec.dt.ClienteDT3;
import br.ufal.aracomp.cosmos.limite3.spec.prov.ILimiteOps3;
import comos.excecao.OperacaoNaoDisponivelException;

public class ConectorEmprestimoLimite implements ILimiteReq {

	ILimiteOps limiteOps;
	ILimiteOps2 limiteOps2;
	ILimiteOps3 limiteOps3;

	public ConectorEmprestimoLimite(ILimiteOps limiteOps, ILimiteOps2 limiteOps2, ILimiteOps3 limiteOps3) {
		this.limiteOps = limiteOps;
		this.limiteOps2 = limiteOps2;
		this.limiteOps3 = limiteOps3;
	}

	// Recebe os Limites e Retorna a diferença entre eles
	public double diferencaEntreLimites(double limite1, double limite2) {
		double max = limite1;
		double min = limite2;
		if (limite2 > max) {
			max = limite2;
		} else if (limite2 < min) {
			min = limite2;
		}
		double resultado = (max - min);
		return resultado;
	}

	// Recebe difença entre os limites e retorna a divisão com seus limites
	// respectivos
	public List<Double> divisaoEntreDiferençaELimite(double diferenca, List<Double> limites) {
		List<Double> resultado = new ArrayList<Double>();
		//double resultado[] = new double[2];
		int i;
		for (i = 0; i < limites.size(); i++) {
			resultado.add(diferenca / limites.get(i));
		}
		return resultado;
	}

	public List<Double> VariacaoPercentual(List<Double> limites) {
		// Variação percentual entre 2 limites
		// OBS: calculo é feito assim: (maiorvalor-menorvalor) / maiorValor &
		// (maiorvalor-menorvalor) / menorValor
		//int i;
		List<Double> resultadoDuplas = new ArrayList<Double>();
		int i, j;
		for (i = 0; i < limites.size() - 1; i++) {
			for (j = i + 1; j < limites.size(); j++) {
				double limiteI = limites.get(i);
				double limiteJ = limites.get(j);
				double diferença = diferencaEntreLimites(limiteI, limiteJ);
				List<Double> doisLimites = new ArrayList<Double>();
				doisLimites.add(limiteI);
				doisLimites.add(limiteJ);
				resultadoDuplas = divisaoEntreDiferençaELimite(diferença, doisLimites);
			}
		}
		return resultadoDuplas;
	}

	@Override
	public double estimarLimite(UsuarioDT usuario) throws OperacaoNaoDisponivelException {
		try {
			List<Double> limites = new ArrayList<>();

			ClienteDT cliente = new ClienteDT();
			cliente.salario = Double.parseDouble(usuario.rendimentos);
			limites.add(this.limiteOps.calcularLimite(cliente));

			ClienteDT2 cliente2 = new ClienteDT2();
			cliente2.salario = Double.parseDouble(usuario.rendimentos);
			limites.add(this.limiteOps2.calcularLimite(cliente2));

			ClienteDT3 cliente3 = new ClienteDT3();
			cliente3.salario = Double.parseDouble(usuario.rendimentos);
			limites.add(this.limiteOps3.calcularLimite(cliente3));

			
			List<Double> VariacaoDuplas = VariacaoPercentual(limites);

			if ((resultadoDuplasL1L2[0] <= 0.05 && resultadoDuplasL1L2[1] <= 0.05 && resultadoDuplasL1L3[0] <= 0.05)) {
				return (limite1 + limite2 + limite3) / 3;
			} else if (resultadoDuplasL1L2[0] <= 0.05 && resultadoDuplasL1L2[1] <= 0.05) {
				return (limite1 + limite2) / 2;
			} else if (resultadoDuplasL1L3[0] <= 0.05 && resultadoDuplasL1L3[1] <= 0.05) {
				return (limite1 + limite3) / 2;
			} else if (resultadoDuplasL2L3[0] <= 0.05 && resultadoDuplasL2L3[1] <= 0.05) {
				return (limite2 + limite3) / 2;
			} else {
				throw new OperacaoNaoDisponivelException();
			}

		} catch (NumberFormatException e) {
			return 0;
		}
	}

}
